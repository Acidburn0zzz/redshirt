// Copyright (C) 2019  Pierre Krieger
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

use futures::prelude::*;
use std::{collections::HashMap, net::SocketAddr};

mod interface;

pub struct NetworkManager<TIfId> {
    devices: HashMap<TIfId, interface::NetworkInterface>,
}

pub enum NetworkManagerEvent {
    Foo,
}

impl<TIfId> NetworkManager<TIfId> {
    pub fn new() -> Self {
        NetworkManager {
            devices: Slab::new(),
        }
    }

    pub fn tcp_connect(&mut self, dest: &SocketAddr) -> TcpSocket {
        for device in self.devices.iter_mut() {
            if let Ok(socket) = device.tcp_connect(dest) {}
        }
    }

    pub fn register_interface(&mut self, id: TIfId) {
        self.devices.insert(id, interface::NetworkInterface::new());
    }

    pub fn unregister_interface(&mut self, id: &TIfId) {
        let device = self.devices.remove(id);
        // TODO:
    }

    /// Returns the next event generated by the [`NetworkManager`].
    pub async fn next_event(&mut self) -> NetworkManagerEvent {
        future::poll_fn(move |cx| {
            for device in &mut self.devices {
                Future::poll(std::pin::Pin::new(&mut device.next_event()), cx);
            }

            std::task::Poll::Pending
        })
        .await
    }
}

pub struct TcpSocket<'a> {
    manager: &'a mut NetworkManager,
    id: u64,
}

impl<'a> TcpSocket<'a> {
    /// Closes the socket.
    pub fn close(self) {
        //self.device.
    }
}

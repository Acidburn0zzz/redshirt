// Copyright (C) 2019  Pierre Krieger
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

use smoltcp::socket::{SocketHandle, SocketSet};
use std::net::SocketAddr;

mod device;

pub struct NetworkManager {
    /// Collection of all the active sockets.
    sockets: SocketSet<'static, 'static, 'static>,
    device: device::RegisteredDevice,
}

pub enum NetworkManagerEvent {
    Foo
}

impl NetworkManager {
    pub fn new() -> Self {
        NetworkManager {
            sockets: SocketSet::new(Vec::new()),
        }
    }

    pub fn tcp_connect(&mut self, dest: &SocketAddr) -> u64 {
        let mut socket = {
            let rx_buf = smoltcp::socket::TcpSocketBuffer::new(vec![0; 1024]);
            let tx_buf = smoltcp::socket::TcpSocketBuffer::new(vec![0; 1024]);
            smoltcp::socket::TcpSocket::new(rx_buf, tx_buf)
        };

        let socket = socket.connect(dest.clone(), dest.clone()).unwrap();       // TODO: bad source
        5
    }

    /// Returns the next event generated by the [`NetworkManager`].
    pub async fn next_event(&mut self) -> NetworkManagerEvent {
        self.device.next_event(&mut self.sockets).await;

        NetworkManagerEvent::Foo
    }
}
